name: Docker Image CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      servicePrincipal: ${{ secrets.SERVICE_PRINCIPAL }}
      servicePrincipalPassword: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
      tenantId: ${{ secrets.TENANT_ID }}
      imageRepository: ${{ secrets.IMAGE_REPOSITORY }}
      containerRegistry: ${{ secrets.CONTAINER_REGISTRY }}
      ttdataAppKey: ${{ secrets.TTDATA_APPKEY }}
      tag: ${{ github.run_number }}
      deployer: ${{ github.actor }}
    steps:
      - uses: actions/checkout@v2
      - name: Azure Container Registry Build
        uses: docker/build-push-action@v1.1.0
        with:
          image: ${{ env.imageRepository }}
          username: ${{ env.servicePrincipal }}
          password: ${{ env.servicePrincipalPassword }}
          repository: ${{ env.imageRepository }}
          registry: ${{ env.containerRegistry }}
          dockerfile: ${{ 'app/Dockerfile' }}
          tags: ${{ env.tag }}
      - name: ACR Fetch Repository Manifest
        id: getManifest
        uses: Azure/cli@v1.0.0
        with:
          inlineScript: |
            az login --service-principal -u ${{ env.servicePrincipal }} -p ${{ env.servicePrincipalPassword }} --tenant ${{ env.tenantId }}
            echo "::set-output name=manifestNewest::$(az acr repository show-manifests -n ${{ env.containerRegistry }} --repository ${{ env.imageRepository }} --orderby time_desc --top 1 --out tsv)"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - name: Run python script
        run: |
          pip install requests
          python ttdata_upload.py ${{ env.deployer }} ${{ env.imageRepository }} ${{ steps.getManifest.outputs.manifestNewest }} ${{ env.tag }} ${{ env.ttdataAppKey}}

          

